DI Dependency Injection Design Pattern

UserController UserService, AuthService = UserRepository, AuthRepository,
ProductRepository, OrderRepository

=> Instance UserController
const userController = new UserController(new UserService(new UserRepository(), new AuthService(new AuthRepository())))

IoC = Inversion of Control = Means : 
    => We don't create instance of class manually, we let the framework create it for us.

=>  DI and Ioc = manage dependencies for us.
 
==> DI container : 
=>  We don't create instance of class manually, we let the framework create it for us.
=> UserService => UserRepository
AuthService => AuthRepository